[gd_scene load_steps=2 format=3 uid="uid://m32fpvym7hl0"]

[sub_resource type="GDScript" id="GDScript_jkq3r"]
script/source = "extends Node2D


signal display_text
signal carry_over
signal carry_back
signal mouse_entered
signal mouse_exited
signal set_data

var height = 180
var width = 320.0
var areas = {\"toppings\":Globals.pixelframe}
var locked = false

var particle_generator_scene = load(\"res://RigidBodyParticles2D/RigidBodyParticles2D.tscn\")
# Spatial coordinate of partical generator
var generator_amount = 6
var distance_between_generators = width/(generator_amount+1)
var position_buffer = distance_between_generators/2

var shuffled_flavor_array = []
var all_flavors = {} # All flavors as keys, [texture, icon] as value


# Start new round: 
func new_round():
	# Populate flavor data array
	if all_flavors.is_empty():
		all_flavors = Globals.get_inventory(\"topping\")
	# Remove current particle generators
	for child in $ParticleGenerators.get_children():
		child.queue_free()
		
	shuffled_flavor_array = all_flavors.keys()
	shuffled_flavor_array.shuffle()
	
#	Create x new particle generators
	for i in range(generator_amount):
		if shuffled_flavor_array.size()==0:
			shuffled_flavor_array = all_flavors.keys()
			shuffled_flavor_array.shuffle()
		var new_flavor = shuffled_flavor_array.pop_front()
		var pos = position_buffer + i*distance_between_generators
		_create_new_particle_generator(new_flavor, pos, i)
		$Timer.start()
		await $Timer.timeout

# Create new particle generator 
func _create_new_particle_generator(flavor, pos, index):
	# Create new generator
	var particle_generator = particle_generator_scene.instantiate()
	
	# Set particle attributes
	particle_generator.texture = all_flavors[flavor][0]
	particle_generator.flavor = flavor
	particle_generator.group = \"toppings\"


	# Add particle generator and set position
	if shuffled_flavor_array.size() == 0:
		shuffled_flavor_array = all_flavors.keys()
		shuffled_flavor_array.shuffle()

	var new_flavor = shuffled_flavor_array.pop_front()
		
	particle_generator.shot_ended.connect(_create_new_particle_generator.bind(new_flavor, pos, index))
	particle_generator.position = Vector2(pos-20, -20)
	
	var image_icon = TextureRect.new()
	image_icon.texture = all_flavors[flavor][1]
	add_child(image_icon)
	emit_signal(\"carry_over\", image_icon, to_global(Vector2(pos-20, -20)), false)
	
	$ParticleGenerators.add_child(particle_generator)

func dialog_finished():
	pass

func get_areas():
	return areas


			
# On vessel enter/exit scene, Connect to signals

func _on_child_entered_tree(node):
	if node.is_in_group(\"vessels\"):
		locked = true
		node.active_areas = areas.values()
		node.frame = Globals.pixelframe
		var entry = node.get_node_or_null(\"Entry\")
		if entry != null:
			entry.set_collision_layer_value(2, true)
			entry.set_collision_mask_value(2, true)
		if !node.out_of_bounds.is_connected(_carry_vessel_over):
			node.out_of_bounds.connect(_carry_vessel_over.bind(node))


func _carry_vessel_over(node):
	if node==null:
		for child in get_children():
			if child.is_in_group(\"vessels\"):
				node=child
	if node != null:
		emit_signal(\"carry_over\", node, node.global_position)

func _on_child_exiting_tree(node):
	if node.is_in_group(\"vessels\"):
		var entry = node.get_node_or_null(\"Entry\")
		if entry != null:
			entry.set_collision_layer_value(2, false)
			entry.set_collision_mask_value(2, false)
		if node.out_of_bounds.is_connected(_carry_vessel_over):
			node.out_of_bounds.disconnect(_carry_vessel_over.bind(node))
		
		# Unlock map if no more vessels in map
		for child in get_children():
			if !(child == node) and (child.is_in_group(\"vessels\")):
				return
		locked = false
		

"

[node name="ToppingsHub" type="Node2D"]
script = SubResource("GDScript_jkq3r")

[node name="ParticleGenerators" type="Node2D" parent="."]

[node name="Timer" type="Timer" parent="."]

[connection signal="child_entered_tree" from="." to="." method="_on_child_entered_tree"]
[connection signal="child_exiting_tree" from="." to="." method="_on_child_exiting_tree"]
